using UnityEngine;
using UnityEngine.XR.Interaction.Toolkit;

[RequireComponent(typeof(Rigidbody))]
[RequireComponent(typeof(Collider))]
[RequireComponent(typeof(XRGrabInteractable))]
public class PlasmaPistol : MonoBehaviour
{
    [Header("Weapon Settings")]
    public float damage = 25f;
    public int magazineSize = 12;
    public float fireRate = 0.5f; // Time between shots
    public float reloadTime = 2f;

    [Header("Effects")]
    public ParticleSystem muzzleFlash;
    public AudioClip fireSound;
    public AudioClip reloadSound;
    public Transform firePoint;

    private int currentAmmo;
    private bool isReloading = false;
    private AudioSource audioSource;
    private XRGrabInteractable grabInteractable;

    private void Awake()
    {
        // Initialize components
        audioSource = GetComponent<AudioSource>();
        grabInteractable = GetComponent<XRGrabInteractable>();
        currentAmmo = magazineSize;
    }

    private void Start()
    {
        // Bind firing action to the grab interactable
        grabInteractable.activated.AddListener(OnFire);
    }

    private void OnDestroy()
    {
        // Unbind firing action
        grabInteractable.activated.RemoveListener(OnFire);
    }

    private void OnFire(ActivateEventArgs args)
    {
        if (isReloading || currentAmmo <= 0)
        {
            Debug.Log("Cannot fire: Reloading or out of ammo.");
            return;
        }

        // Fire the weapon
        Fire();
    }

    private void Fire()
    {
        // Play muzzle flash effect
        if (muzzleFlash != null)
        {
            muzzleFlash.Play();
        }

        // Play fire sound
        if (fireSound != null)
        {
            audioSource.PlayOneShot(fireSound);
        }

        // Simulate firing logic (e.g., raycast or projectile instantiation)
        Debug.Log("Plasma Pistol fired!");

        // Decrease ammo count
        currentAmmo--;

        // Provide haptic feedback
        ProvideHapticFeedback();
    }

    private void ProvideHapticFeedback()
    {
        if (grabInteractable.interactorsSelecting.Count > 0)
        {
            var interactor = grabInteractable.interactorsSelecting[0];
            if (interactor is XRBaseControllerInteractor controllerInteractor)
            {
                controllerInteractor.SendHapticImpulse(0.5f, 0.1f); // Intensity and duration
            }
        }
    }

    public void Reload()
    {
        if (isReloading)
        {
            return;
        }

        StartCoroutine(ReloadCoroutine());
    }

    private IEnumerator ReloadCoroutine()
    {
        isReloading = true;

        // Play reload sound
        if (reloadSound != null)
        {
            audioSource.PlayOneShot(reloadSound);
        }

        Debug.Log("Reloading...");
        yield return new WaitForSeconds(reloadTime);

        currentAmmo = magazineSize;
        isReloading = false;
        Debug.Log("Reload complete.");
    }
}
