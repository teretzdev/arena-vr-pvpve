using UnityEditor;
using UnityEngine;

namespace ArenaDeathMatch.Utilities
{
    /// <summary>
    /// Script to create the PlayerCharacter prefab programmatically.
    /// </summary>
    public class PlayerCharacterPrefabCreator
    {
        [MenuItem("Tools/Create PlayerCharacter Prefab")]
        public static void CreatePlayerCharacterPrefab()
        {
            // Create a new GameObject for the PlayerCharacter
            GameObject playerCharacter = new GameObject("PlayerCharacter");

            // Add a 3D model (Capsule) to represent the player visually
            GameObject model = GameObject.CreatePrimitive(PrimitiveType.Capsule);
            model.name = "PlayerModel";
            model.transform.SetParent(playerCharacter.transform);
            model.transform.localPosition = Vector3.zero;

            // Remove the Capsule's Collider (we'll use CharacterController instead)
            Object.DestroyImmediate(model.GetComponent<Collider>());

            // Add a CharacterController component
            CharacterController characterController = playerCharacter.AddComponent<CharacterController>();
            characterController.center = new Vector3(0, 1, 0); // Adjust center for capsule model
            characterController.height = 2f; // Default height for capsule model
            characterController.radius = 0.5f; // Default radius for capsule model

            // Add the PlayerMovement script
            playerCharacter.AddComponent<PlayerMovement>();

            // Set up the prefab path
            string prefabPath = "Assets/Prefabs/PlayerCharacter.prefab";

            // Save the GameObject as a prefab
            PrefabUtility.SaveAsPrefabAsset(playerCharacter, prefabPath);

            // Clean up the temporary GameObject
            Object.DestroyImmediate(playerCharacter);

            Debug.Log($"PlayerCharacter prefab created and saved at {prefabPath}");
        }
    }

    /// <summary>
    /// Script to handle player movement logic.
    /// </summary>
    [RequireComponent(typeof(CharacterController))]
    public class PlayerMovement : MonoBehaviour
    {
        [Header("Movement Settings")]
        public float moveSpeed = 5f;
        public float jumpHeight = 2f;
        public float gravity = -9.81f;

        private CharacterController characterController;
        private Vector3 velocity;

        private void Awake()
        {
            characterController = GetComponent<CharacterController>();
        }

        private void Update()
        {
            // Handle movement input
            float horizontal = Input.GetAxis("Horizontal");
            float vertical = Input.GetAxis("Vertical");
            Vector3 move = transform.right * horizontal + transform.forward * vertical;

            characterController.Move(move * moveSpeed * Time.deltaTime);

            // Handle jumping
            if (characterController.isGrounded && velocity.y < 0)
            {
                velocity.y = -2f; // Reset velocity when grounded
            }

            if (Input.GetButtonDown("Jump") && characterController.isGrounded)
            {
                velocity.y = Mathf.Sqrt(jumpHeight * -2f * gravity);
            }

            // Apply gravity
            velocity.y += gravity * Time.deltaTime;
            characterController.Move(velocity * Time.deltaTime);
        }
    }
}
